description "Starphleet Main"


start on filesystem and net-device-up IFACE!=lo
stop on [!2345]

respawn

pre-start script
  source `which tools`
  test -f /starphleet/provision/volumes && /starphleet/provision/volumes
end script

script
  source `which tools`
  while [ 1 ]
  do
    #if we are on EC2, metadata provides keys and the headquarters url
    if curl "http://169.254.169.254/latest/user-data/" --silent --connect-timeout 1 > /dev/null; then
      starphleet-headquarters $(curl "http://169.254.169.254/latest/user-data/" --silent | jq --raw-output '.STARPHLEET_HEADQUARTERS')
      test -d /var/starphleet/private_keys || mkdir -p /var/starphleet/private_keys
      curl "http://169.254.169.254/latest/user-data/" --silent \
      | jq --raw-output '.STARPHLEET_PRIVATE_KEY' \
      > /var/starphleet/private_keys/userdata
    fi
    #mark that we started
    touch /var/starphleet/.system
    #this is the main event pump that drives starphleet autodeploy
    if [ -s "${HEADQUARTERS_SOURCE}" ]; then
      #this pulse drives the system
      echo -n
    else
      echo $(tput setaf 1; tput bold)
      echo "**"
      echo You have no headquarters, add one with
      echo starphleet-headquarters giturl
      echo "**"
      echo $(tput sgr0)
    fi
    sleep "${STARPHLEET_PULSE}"
  done
end script

post-stop script
  set +e
  source `which tools`
  #lose all service state on stop, putting things back to as if no
  #services were published at all
  test -d "${CURRENT_ORDERS}" && rm -rf "${CURRENT_ORDERS}"
  test -d "${HEADQUARTERS_LOCAL}" && rm -rf "${HEADQUARTERS_LOCAL}"
  test -d "${NGINX_CONF}/published" && rm -rf "${NGINX_CONF}/published"
  for container in $(lxc-ls | grep '\.orders')
  do
    warn need to destroy ${container}
    starphleet-lxc-destroy ${container}
  done
end script
