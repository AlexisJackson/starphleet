#!/bin/bash
source `which tools`

while [ 1 ]
do
  if [ -f "${STARPHLEET_NGINX_HUP_TURD}" ]; then

    # just to avoid getting stuck, we'll remove the hup turd first
    rm "${STARPHLEET_NGINX_HUP_TURD}" # yes we could race, but meh

    ######################
    # Publish
    ######################

    # Remove the current configs and start fresh
    rm "${NGINX_CONF}"/published/* 2> /dev/null

    # Run all the accessory nginx configuration tools
    starphleet-ldap-servers
    starphleet-public-keys
    starphleet-beta-groups
    starphleet-nginx-acl-rules

    # CURRENT_ORDERS dir is the 'master' of what should be published
    for CONTAINER_FILE in $(find "${CURRENT_ORDERS}" -type f -iname ".container")
    do
      # Extract the container name that should be deployed
      name=$(cat "${CONTAINER_FILE}")

      # Extract the name of the order
      order="${CONTAINER_FILE%/*}"
      order="${order##*/}"

      STATUS_FILE="${CURRENT_ORDERS}/${order}/.starphleetstatus.${name}"

      # http basic password authentication access
      if [ -f "${HEADQUARTERS_LOCAL}/${order}/.htpasswd" ]; then
        HTPASSWD="${HEADQUARTERS_LOCAL}/${order}/.htpasswd"
      else
        HTPASSWD='-'
      fi

      # and LDAP access, almost the same kind of thing -- but LDAPy
      if [ -f "${HEADQUARTERS_LOCAL}/${order}/.ldap" ]; then
        LDAP="${HEADQUARTERS_LOCAL}/${order}/.ldap"
      else
        LDAP='-'
      fi

      # Now attempt to write the nginx configs (starphleet-publish)
      if ! starphleet-publish "${name}" "${order}" "${HEADQUARTERS_LOCAL}/${order}/orders" "${HTPASSWD}" "${LDAP}" ; then
        warn "Publish Failed - Container: ${name} / Order: ${order}"
        echo 'publish failed' > "${STATUS_FILE}"
        # If we have an error then we fall back to the last known good container
        if [ -f "${CURRENT_ORDERS}/${order}/.last_known_good_container" ]; then
          name=$(cat "${CURRENT_ORDERS}/${order}/.last_known_good_container")
          warn "Falling back to container ${name}"
          starphleet-publish "${name}" "${order}" "${HEADQUARTERS_LOCAL}/${order}/orders" "${HTPASSWD}" "${LDAP}"
        fi
      fi

      # Keep track of the last good container as a fallback
      echo "${name}" > "${CURRENT_ORDERS}/${order}/.last_known_good_container"

      # Expose any ports requested in the orders
      starphleet-expose "${name}" "${HEADQUARTERS_LOCAL}/${order}/orders"
    done

    ######################
    # Validate Config / HUP
    ######################

    if ${STARPHLEET_ROOT}/nginx/nginx -p "${NGINX_CONF}" -c nginx.conf -t; then
      # the config is good, let's get nginx running
      reload starphleet_nginx || start starphleet_nginx
    else
      #we have a bad configuration, we'll need to do something about that
      warn "nginx configuration fails validity test, will not restart or apply configuration changes"
      ${STARPHLEET_ROOT}/nginx/nginx -p "${NGINX_CONF}" -c nginx.conf -t 2>&1 || true | mail -s "Starphleet NGINX Config Failed Validation" "root@localhost"
    fi
  fi

  sleep "${STARPHLEET_PULSE}"

done
