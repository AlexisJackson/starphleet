description "Starphleet order needs to be served, which is running a container for a given image version"

stop on stopping starphleet

#name is to let us have multiple running versions of the same order
instance $name
#also needs
# - $order: the directory where the ordered repository is cloned

respawn

pre-start script
  source /var/starphleet/.headquarters
  CONTAINER_NAME="${name}"
  CONTAINER_ROOT=/var/lib/lxc/${CONTAINER_NAME}/rootfs
  ORDER_LOCAL="${CURRENT_ORDERS}/${order}/git"
  #flockin, LXC doesn't appear to like doing concurrent builds with BTRFS
  #so hey, we pop in a flock, and if all else fails, this script respanws a lot
  #notice how we are cloning from the *local*, no need for a network trip...
  echo 'building' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  flock "${CURRENT_ORDERS}" -c "starphleet-containerize ${ORDER_LOCAL} ${CONTAINER_NAME} \"${CURRENT_ORDERS}/${order}/orders\""
  echo 'built' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  info ready to serve web
end script

script
  CONTAINER_NAME="${name}"
  #at this point, the container is running and can be really used
  lxc-attach --name ${CONTAINER_NAME} -- /web
end script

post-start script
  set +e
  source /var/starphleet/.headquarters
  export CONTAINER_NAME="${name}"
  echo 'checking' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"

  #sourcing here to get variables
  autodeploy () { echo -n; }
  export -f autodeploy
  test -f "${CURRENT_ORDERS}/${order}/orders" && source "${CURRENT_ORDERS}/${order}/orders"
  test -f "${HEADQUARTERS_LOCAL}/.starphleet" && source "${HEADQUARTERS_LOCAL}/.starphleet"

  available () {
    #at this point we have a running container, and it answers HTTP, so we
    #are on the air and can expose it via nginx
    #note that the publication name doesn't have the version hashes in it, this
    #is because new versions replace old versions in nginx for the HUP update -- if
    #two versions of the config are left about on disk, then we will have duplicate
    #entries
    test ! -d "${NGINX_CONF}/published" && mkdir -p "${NGINX_CONF}/published"
    PUBLISH_CONF="${NGINX_CONF}/published/$(urlencode \"${order}\").conf"
    starphleet-publish "${CONTAINER_NAME}" $PORT "/${order}" > "${PUBLISH_CONF}"
    info service published to "/${order}"
    reload starphleet_nginx
    echo 'online' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  }

  if [ -f "${CURRENT_ORDERS}/${order}/git/healthcheck" ]; then
    HEALTHCHECK=$(cat "${CURRENT_ORDERS}/${order}/git/healthcheck")
  else
    HEALTHCHECK='/'
  fi
  if starphleet-ready "${CONTAINER_NAME}" "${PORT}" "${HEALTHCHECK}"; then
    available
  else
    #at this point the service has failed to properly start
    warn service failed to publish "/${order}"
    echo 'failed' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  fi
end script

post-stop script
  set +e
  source /var/starphleet/.headquarters
  export CONTAINER_NAME="${name}"
  PUBLISH_CONF="${NGINX_CONF}/published/$(urlencode \"${order}\").conf"
  PUBLISH_CONF="${NGINX_CONF}/published/${CONTAINER_NAME}.conf"
  test -f "${PUBLISH_CONF}" && rm "${PUBLISH_CONF}"
  starphleet-destroy-lxc "${CONTAINER_NAME}"
  echo 'offline' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
end script
