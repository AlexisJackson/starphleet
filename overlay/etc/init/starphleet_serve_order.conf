description "Starphleet order needs to be served, which is running a container for a given image version"

stop on stopping starphleet

#name is to let us have multiple running versions of the same order
instance $name
#also needs
# - $order: the directory where the ordered repository is cloned

respawn

pre-start script
  source `which tools`
  info "building ${name}"
  get_CONTAINER_NAME "${name}"
  ORDER_LOCAL="${CURRENT_ORDERS}/${order}/git"
  ORDER_LOGS="${STARPHLEET_ROOT}/logs/${order}"
  [ -d "${ORDER_LOGS}" ] || mkdir -p "${ORDER_LOGS}"
  echo 'building' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  starphleet-containerize ${ORDER_LOCAL} ${CONTAINER_NAME} "${CURRENT_ORDERS}/${order}/orders" | tee "${ORDER_LOGS}/service.log"
  echo 'built' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
end script

script
  source `which tools`
  info "starting ${name}"
  ulimit -n ${MAX_OPEN_FILES}
  get_CONTAINER_NAME "${name}"
  exec lxc-attach --name ${CONTAINER_NAME} -- /web
end script

post-start script
  set +e
  source `which tools`
  info "checking ${name}"
  get_CONTAINER_NAME "${name}"
  #the container and service is started, so healthcheck it before we publish it
  #in order to have a real drainstop / transparent upgrade feature
  echo 'checking' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"

  #sourcing here to get variables, in particular $PORT
  test -f "${CONTAINER_ROOT}/.orders" && source "${CONTAINER_ROOT}/.orders"
  test -f "${CONTAINER_ROOT}/.starphleet" && source "${CONTAINER_ROOT}/.starphleet"

  #if there is a specified healthcheck url
  if [ -f "${CURRENT_ORDERS}/${order}/git/healthcheck" ]; then
    #forgive comments in the healthcheck file
    HEALTHCHECK=$(sed '/^\#/d' "${CURRENT_ORDERS}/${order}/git/healthcheck")
  else
    HEALTHCHECK=''
  fi

  if [ -z "${HEALTHCHECK}" ] || starphleet-ready "${CONTAINER_NAME}" "${PORT}" "${HEALTHCHECK}"; then
    #at this point we have a running container, and it answers HTTP, so we
    #are on the air and can expose it via nginx
    #new versions replace old versions in nginx for the HUP update
    starphleet-publish "${CONTAINER_NAME}" ${PORT} "/${order}"
    info service published to "/${order}"
    echo 'online' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
    #any prior version of this order should now be reaped after
    #we wait a small time for prior requests to flush out
    sleep ${STARPHLEET_DRAINSTOP_WAIT}
    if [ -f "${CURRENT_ORDERS}/${order}/.current" ]; then
      stop starphleet_serve_order name=$(cat "${CURRENT_ORDERS}/${order}/.current")
    fi
    #and track that this is now the current version
    echo "${name}" > "${CURRENT_ORDERS}/${order}/.current"
    exit 0
  else
    #at this point the service has failed to properly start
    warn service failed to publish "/${order}"
    echo 'failed' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
    exit 1
  fi
end script

post-stop script
  set +e
  source `which tools`
  get_CONTAINER_NAME "${name}"
  info destroying "${CONTAINER_NAME}"
  #nothing super fancy, but the container should be tossed
  #leaving a very clean state like nothing ever happened
  #but, the publication remains, as this service exiting may be a drainstop
  #and should not delete the publication which was made by another instance
  #of this job
  starphleet-lxc-destroy "${CONTAINER_NAME}"
end script
