description "Starphleet order needs to be served, which is running a container for a given image version"

stop on stopping starphleet

#name is to let us have multiple running versions of the same order
instance $name
#also expects $image and $order

respawn

pre-start script
  source /var/starphleet/.headquarters
  #build the container, this is based not on the repository but on
  #the build script within
  starphleet-build "${order}/git" "${order}/container"
  CONTAINER_NAME=$(cat "${order}/container")
  INSTANCE_NAME="${CONTAINER_NAME}-$$"
  CONTAINER_ROOT=/var/lib/lxc/${INSTANCE_NAME}/rootfs
  #make a container, this sets up a file system
  lxc-clone -o "${CONTAINER_NAME}" -n "${INSTANCE_NAME}" -s
  #block script, makes sure we are on the air
  starphleet-wait-network > "${CONTAINER_ROOT}/.block"
  #create the 'run' script, this does the actual doing
  starphleet-run-script "${order}/git/Starphleet" > "${CONTAINER_ROOT}/.run"
  #always able to see your own source
  if btrfs subvolume snapshot "${order}/git" ${CONTAINER_ROOT}; then
    echo Used a snapshot
  else
    echo Used a copy
    cp -R "${order}/git" "${CONTAINER_ROOT}/local_repository"
  fi
  #get running and make sure the network is up
  lxc-start --name ${INSTANCE_NAME} -d
  lxc-wait --name ${INSTANCE_NAME} --state RUNNING
  lxc-attach --name ${INSTANCE_NAME} -- bash /.block
  IP_ADDRESS=$(lxc-ls --fancy | grep "${INSTANCE_NAME}" | awk '{ print $3; }')
  echo "${INSTANCE_NAME}" > "${order}/${name}.instance"
  echo "${IP_ADDRESS}" > "${order}/${name}.ip"
end script

script
  echo 'running'
  source /var/starphleet/.headquarters
  INSTANCE_NAME=$(cat "${order}/${name}.instance")
  #at this point, the container is running and can be really used
  lxc-attach --name ${INSTANCE_NAME} -- bash /.run
end script

post-start script
  set +e
  source /var/starphleet/.headquarters
  CONTAINER_IP=$(cat "${order}/${name}.ip")
  echo $CONTAINER_IP
  HEALTHCHECK=$(cat "${order}/git/Starphleet" | grep healthcheck | awk '{print $2;}' | sed -e s/container/${CONTAINER_IP}/)
  if starphleet-ready $HEALTHCHECK; then
    #at this point we have a running container, and it answers HTTP, so we
    #are on the air and can expose it via nginx
    echo service available
  else
    #at this point the service has failed to properly start
    echo service failed
  fi

  exit 0
  #hard link, keeps track of running containers
  ln "${order}/info.json" "${CURRENT_CONTAINERS}/${PACKED_ORDER}.json"
end script

post-stop script
  INSTANCE_NAME=$(cat "${order}/${name}.instance")
  lxc-stop --name ${INSTANCE_NAME}
  lxc-wait --name ${INSTANCE_NAME} --state STOPPED
  lxc-destroy --name ${INSTANCE_NAME}
  rm "${order}/${name}.instance"
  rm "${order}/${name}.ip"
end script
