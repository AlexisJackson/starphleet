# vi: set ts=2 et sw=2 sts=2 :
description "Starphleet order needs to be served, which is running a container for a given image version"

stop on stopping starphleet

#name is to let us have multiple running versions of the same order
instance $name
#also needs
# - $order: the directory where the ordered repository is cloned

respawn

pre-start script
  source `which tools`
  info "building ${name}"
  ORDER_LOCAL="${CURRENT_ORDERS}/${order}/git"
  get_CURRENT_SHA "${ORDER_LOCAL}"
  ORDER_LOGS="${STARPHLEET_ROOT}/logs/${order}"
  [ -d "${ORDER_LOGS}" ] || mkdir -p "${ORDER_LOGS}"
  echo 'building' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  apply_order_exports "${CURRENT_ORDERS}/${order}/orders"
  for (( crew_num = 1; crew_num <= ${CREW_MEMBERS}; crew_num += 1 ))
  do
    get_CONTAINER_NAME "${name}" "${crew_num}"
    if [ "${crew_num}" = "1" ]; then
      #Create a crew member
      echo 'Creating Crew'
      starphleet-containerize "${ORDER_LOCAL}#${CURRENT_SHA}" "${CONTAINER_NAME}" "${CURRENT_ORDERS}/${order}" | tee "${ORDER_LOGS}/service.log"      
      ORIGINAL_CONTAINER_NAME=${CONTAINER_NAME}
      [ "${CREW_MEMBERS}" -gt "1" ] && lxc-stop --name ${ORIGINAL_CONTAINER_NAME}
    else
        #Clone the crew
        echo "Cloning Crew from ${ORIGINAL_CONTAINER_NAME} ${CONTAINER_NAME}"
        lxc-clone --snapshot -B overlayfs -o "${ORIGINAL_CONTAINER_NAME}" -n "${CONTAINER_NAME}"
        lxc-start --name ${CONTAINER_NAME} -d
        starphleet-lxc-wait ${CONTAINER_NAME} RUNNING
        lxc-attach --name ${CONTAINER_NAME} -- bash starphleet-wait-network
        lxc-attach --name ${CONTAINER_NAME} -- bash -c 'sed -i -e '/\.orders$/d' /etc/hosts && echo -e "\n127.0.0.1    $(< /etc/hostname)" >> /etc/hosts'
    fi
    echo 'built' > "${CURRENT_ORDERS}/${order}/.starphleetstatus_CM${crew_num}"
  done
  if [ "${CREW_MEMBERS}" -gt "1" ]; then
    lxc-start --name ${ORIGINAL_CONTAINER_NAME} -d
    starphleet-lxc-wait ${ORIGINAL_CONTAINER_NAME} RUNNING
    lxc-attach --name ${ORIGINAL_CONTAINER_NAME} -- bash starphleet-wait-network
  fi
  echo 'built' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
end script

script
  source `which tools`
  info "starting ${name}"
  ulimit -n ${MAX_OPEN_FILES}
  apply_order_exports "${CURRENT_ORDERS}/${order}/orders"
  for (( crew_num = 1; crew_num <= ${CREW_MEMBERS}; crew_num += 1 ))
  do
    get_CONTAINER_NAME "${name}" "${crew_num}"
    start starphleet_serve_order_to_crew name="${CONTAINER_NAME}" order="${order}" crew_num="${crew_num}" parent="${name}"
    echo 'running' > "${CURRENT_ORDERS}/${order}/.starphleetstatus_CM${crew_num}"
  done
  get_HASH "${name}"
  while [ "$(lxc-ls --fancy | grep ${HASH} | wc -l)" -gt "0" ]
  do
    sleep "${STARPHLEET_PULSE}"
  done
  echo 'stopped' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
end script

post-start script
  set +e
  source `which tools`
  info "checking ${name}"
  #the container and service is started, so healthcheck it before we publish it
  #in order to have a real drainstop / transparent upgrade feature
  echo 'checking' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"

  #if there is a specified healthcheck url
  if [ -f "${CURRENT_ORDERS}/${order}/git/healthcheck" ]; then
    #forgive comments in the healthcheck file
    HEALTHCHECK=$(sed '/^\#/d' "${CURRENT_ORDERS}/${order}/git/healthcheck")
  else
    HEALTHCHECK=''
  fi

  #http basic password authentication access
  if [ -f "${HEADQUARTERS_LOCAL}/${order}/.htpasswd" ]; then
    HTPASSWD="${HEADQUARTERS_LOCAL}/${order}/.htpasswd"
  else
    HTPASSWD=""
  fi

  get_HASH "${name}"
  apply_order_exports "${CURRENT_ORDERS}/${order}/orders"

  #run once to proxy pass to the upstream
  if [ -z "${HEALTHCHECK}" ] || starphleet-ready "${HASH}" "${PORT}" "${HEALTHCHECK}"; then
    #at this point we have a running container, and it answers HTTP, so we
    #are on the air and can expose it via nginx
    #new versions replace old versions in nginx for the HUP update
    starphleet-publish "${HASH}" "${PORT}" "${PUBLISH_PORT}" "${order}" "${HTPASSWD}"
    if [ -n "${PUBLISH_PORT}" ]; then
      info "service published to /${order} and :${PUBLISH_PORT}/"
    else
      info "service published to /${order}"
    fi
    
    echo 'online' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
    #any prior version of this order should now be reaped after
    #we wait a small time for prior requests to flush out
    sleep ${STARPHLEET_DRAINSTOP_WAIT}
    starphleet-reaper "${name}" "${order}"
    exit 0
  else
    #at this point the service has failed to properly start
    warn service failed to publish "/${order}"
    echo 'failed' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
    exit 1
  fi
end script

post-stop script
  set +e
  source `which tools`

  #Clean up published Nginx Configs
  public_url=$(echo "/${order}/" | sed -e 's[//[/[g')

  [ -f "${NGINX_CONF}/upstream/$(urlencode \"${public_url}\").conf" ] && rm "${NGINX_CONF}/upstream/$(urlencode \"${public_url}\").conf"$
  [ -f "${NGINX_CONF}/published/$(urlencode \"${public_url}\").conf" ] && rm "${NGINX_CONF}/published/$(urlencode \"${public_url}\").conf"
  [ -f "${NGINX_CONF}/published_bare/$(urlencode \"${public_url}\").conf" ] && rm "${NGINX_CONF}/published_bare/$(urlencode \"${public_url}\").conf"
end script
