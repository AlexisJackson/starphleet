description "Starphleet order needs to be served"

stop on stopping starphleet

instance $local

respawn

env CONTAINERS="/var/starphleet/current_containers"

pre-start script
  mkdir -p "${CONTAINERS}"
end script

script
  #run at the current SHA
  cd ${local}
  CURRENT_SHA=`git log -n 1 --no-merges --pretty=format:%h`
  #in the order directory itself, track the cid of the running docker container
  cd ..
  ORDER=$(pwd)
  SERVICE="${CURRENT_SHA}-0"
  #run the docker container as a service process, not as a daemon
  #count on upstart to be the daemon manager, not docker
  docker run -cidfile="${ORDER}/${SERVICE}.cid" -t "${CURRENT_SHA}"
end script

post-start script
  cd ${local}
  CURRENT_SHA=`git log -n 1 --no-merges --pretty=format:%h`
  cd ..
  ORDER=$(pwd)
  SERVICE="${CURRENT_SHA}-0"
  while [ ! -f "${ORDER}/${SERVICE}.cid" ]
  do
    sleep 1
  done
  CID=$(cat "${ORDER}/${SERVICE}.cid")
  docker inspect ${CID} > "${ORDER}/container.json"
  phleet generate info "${ORDER}/order" "${ORDER}/container.json" > "${ORDER}/info.json"
  ##TODO -- make this link only after the health check passes
  #hard link, keeps track of running containers
  ln "${ORDER}/info.json" "${CONTAINERS}/${CID}.json"
end script

post-stop script
  #run at the current SHA
  cd ${local}
  CURRENT_SHA=`git log -n 1 --no-merges --pretty=format:%h`
  #in the order directory itself, track the cid of the running docker container
  cd ..
  ORDER=$(pwd)
  SERVICE="${CURRENT_SHA}-0"
  CID=$(cat "${ORDER}/${SERVICE}.cid")
  rm "${ORDER}/${SERVICE}.cid"
  rm "${ORDER}/container.json"
  rm "${ORDER}/info.json"
  rm "${CONTAINERS}/${CID}.json"
end script
