# vi: set ts=2 et sw=2 sts=2 :
description "Starphleet order needs to be served, which is running a container for a given image version"

stop on stopping starphleet

#name is to let us have multiple running versions of the same order
instance $name
#also needs
# - $order: the directory where the ordered repository is cloned

respawn
respawn limit 3 600

pre-start script
  source `which tools`
  ORDER_LOCAL="${CURRENT_ORDERS}/${order}/git"
  get_CURRENT_SHA "${ORDER_LOCAL}"
  echo 'building' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  if [ -f "${CURRENT_ORDERS}/${order}/.starphleetenv" ]
  then
    info existing container can be recycled
  else
    starphleet-lxc-destroy "${name}"
  fi
  starphleet-containerize "${ORDER_LOCAL}#${CURRENT_SHA}" "${name}" "${CURRENT_ORDERS}/${order}" \
  || echo 'building failed' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  echo "${name}" > "${CURRENT_ORDERS}/${order}/.container"
end script

script
  source `which tools`
  #check on our container
  STATUS=$(cat "${CURRENT_ORDERS}/${order}/.starphleetstatus")
  if [ "${STATUS}" == 'building failed' ]; then
    error 'building the container failed'
    exit 1
  fi
  #yep -- we have a container
  info "starting ${name}"
  if [ -f "${CURRENT_ORDERS}/${order}/.starphleetenv" ]
  then
    ORDER_LOCAL="${CURRENT_ORDERS}/${order}/git"
    get_CURRENT_SHA "${ORDER_LOCAL}"
    lxc-attach --name ${name} -- sudo -H -u ${STARPHLEET_APP_USER} bash -c "setsid ~/start web"
    echo 'stopped' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  else
    #our container isn't actually runnable
    starphleet-reaper XXX "${order}"
    mail_log
    exit 1
  fi
end script

post-start script
  set +e
  source `which tools`

  #check on our container
  STATUS=$(cat "${CURRENT_ORDERS}/${order}/.starphleetstatus")
  if [ "${STATUS}" == 'building failed' ]; then
    error 'not checking'
    starphleet-reaper XXX "${order}"
    mail_log
    exit 1
  fi

  info "checking ${name}"
  ORDER_LOCAL="${CURRENT_ORDERS}/${order}/git"
  get_CURRENT_SHA "${ORDER_LOCAL}"
  #the container and service is started, so healthcheck it before we publish it
  #in order to have a real drainstop / transparent upgrade feature
  echo 'checking' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"

  #if there is a specified healthcheck url
  if [ -f "${CURRENT_ORDERS}/${order}/git/healthcheck" ]; then
    #forgive comments in the healthcheck file
    HEALTHCHECK=$(sed '/^\#/d' "${CURRENT_ORDERS}/${order}/git/healthcheck")
  else
    HEALTHCHECK=''
  fi

  if [ -z "${HEALTHCHECK}" ] || starphleet-ready "${name}" "${PORT}" "${HEALTHCHECK}"; then
    #at this point we have a running container, and it answers HTTP, so we
    #are on the air and can expose it via nginx
    #new versions replace old versions in nginx for the HUP update
    #http basic password authentication access
    if [ -f "${HEADQUARTERS_LOCAL}/${order}/.htpasswd" ]; then
      HTPASSWD="${HEADQUARTERS_LOCAL}/${order}/.htpasswd"
    else
      HTPASSWD=""
    fi
    source "${CURRENT_ORDERS}/${order}/.starphleetenv"
    starphleet-publish "${name}" "${PORT}" "${PUBLISH_PORT}" "/${order}" "${HTPASSWD}"
    echo 'online' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
    #any prior version of this order should now be reaped after
    #we wait a small time for prior requests to flush out
    sleep ${STARPHLEET_DRAINSTOP_WAIT}
    starphleet-reaper "${name}" "${order}"
    exit 0
  else
    #at this point the service has failed to properly start
    warn service failed to publish "/${order}"
    echo 'failed' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
    mail_log
    exit 1
  fi
end script

post-stop script
  lxc-stop --name ${name}
end script
