description "Starphleet order needs to be served, which is running a container for a given image version"

stop on stopping starphleet

#name is to let us have multiple running versions of the same order
instance $name
#also needs
# - $order: the directory where the ordered repository is cloned

respawn

pre-start script
  echo 'starting'
  source /var/starphleet/.headquarters
  CONTAINER_NAME="${name}"
  CONTAINER_ROOT=/var/lib/lxc/${CONTAINER_NAME}/rootfs
  starphleet-build "${order}/git" "${CONTAINER_NAME}"
  #block script, makes sure we are on the air
  starphleet-wait-network > "${CONTAINER_ROOT}/.block"
  #get running and make sure the network is up
  lxc-start --name ${CONTAINER_NAME} -d
  starphleet-wait-lxc ${CONTAINER_NAME} RUNNING
  lxc-attach --name ${CONTAINER_NAME} -- bash /.block
  IP_ADDRESS=$(lxc-ls --fancy | grep "${CONTAINER_NAME}" | awk '{ print $3; }')
  echo "${IP_ADDRESS}" > "${order}/${name}.ip"
end script

script
  echo 'running'
  source /var/starphleet/.headquarters
  CONTAINER_NAME="${name}"
  #at this point, the container is running and can be really used
  lxc-attach --name ${CONTAINER_NAME} -- /start web
end script

post-start script
  set +e
  source /var/starphleet/.headquarters
  export CONTAINER_NAME="${name}"
  export CONTAINER_IP=$(cat "${order}/${name}.ip")
  export NAME="${name}"
  if [ -f "${order}/git/Starphleet" ]; then
    HEALTHCHECK=$(cat "${order}/git/Starphleet" | grep healthcheck | awk '{print $2;}' | sed -e s/container/${CONTAINER_IP}/)
    if starphleet-ready $HEALTHCHECK; then
      #at this point we have a running container, and it answers HTTP, so we
      #are on the air and can expose it via nginx
      echo service available
      publish () { starphleet-publish $* > "${order}/current.json"; }
      autodeploy () { echo -n; }
      export -f autodeploy publish
      bash "${order}/order"
    else
      #at this point the service has failed to properly start
      echo service failed
    fi
  else
      publish () { starphleet-publish $* > "${order}/current.json"; }
      autodeploy () { echo -n; }
      export -f autodeploy publish
      bash "${order}/order"
  fi

  exit 0
  #hard link, keeps track of running containers
  ln "${order}/info.json" "${CURRENT_CONTAINERS}/${PACKED_ORDER}.json"
end script

post-stop script
  set +e
  source /var/starphleet/.headquarters
  export CONTAINER_NAME="${name}"
  lxc-stop --name ${CONTAINER_NAME}
  starphleet-wait-lxc ${CONTAINER_NAME} STOPPED
  lxc-destroy --name ${CONTAINER_NAME}
  rm "${order}/${name}.ip"
end script
