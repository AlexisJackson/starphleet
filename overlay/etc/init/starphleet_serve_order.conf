description "Starphleet order needs to be served, which is running a container for a given image version"

stop on stopping starphleet

#name is to let us have multiple running versions of the same order
instance $name
#also expects $image and $order

respawn
#one fork as starphleet-run is a bash script
expect fork

pre-start script
  source /var/starphleet/.headquarters
  #build the container, this is based not on the repository but on
  #the build script within
  starphleet-build "${order}/git"
end script

script
  source /var/starphleet/.headquarters
  #run the actual service, leaving a containerfile to track it
  starphleet-run "${order}/git" "${order}/${name}.container"
end script

post-start script
  exit 0
  source /var/starphleet/.headquarters
  #wait for the CID to appear, means docker did its bit for starphleet
  #YOU SHOULD DO YOUR BIT FOR STARPHLEET TOO!
  while [ ! -f "${order}/${image}.cid" ]
  do
    sleep 1
  done
  #TODO: for all of the following, this is only appropriate for the tip SHA
  CID=$(cat "${order}/${image}.cid")
  #ask docker for a bunch of nice info about the container now that it is started
  #including the super interesting EXPOSE ports
  docker inspect ${CID} > "${order}/container.json"
  #this uses our code generator to mix the private ports from the container with
  #the EXPOSE dynamic ports from the order's Dockerfile to create a mapping of
  #the actual ports that happened to be used, which we'll leverage in nginx
  generate info "${name}" "${order}/order" "${order}/container.json" > "${order}/info.json"
  # we'll check each mapped port for an available http service
  for port in `generate containerPorts "${order}/info.json"`
  do
    # the port can come in with some awesome whitespace which is a disaster,
    # so we remove it
    port=`echo ${port} | sed -e "s/[[:space:]]//g"`
    # this will wait until we get a 200 from the url and exit 0, if it never
    # comes back it will return a 1 which upstart hates, so we'll ignor it
    # we also may want to add a configurable diagnostic endpoint, but that seems
    # excessive for now
    http_ready "http://localhost:${port}/diagnostic" || true
    # as you can tell from '|| true' this will come back even if things don't go
    # as expected.  There's only so much we can do, in this case we will have
    # not received a 200 in 10 seconds so we'll continue on hoping for the best.
    # This, of course, will also allow services that don't return a 200 on
    # diagnostic to come up after the 10 second check period
  done
  #at this point we have a running container, and it answers HTTP, so we
  #are on the air and can expose it via nginx
  #slash-less, makes a nice file name
  PACKED_ORDER=$(echo ${order} | sed -e "s[/[_[g")
  #hard link, keeps track of running containers
  ln "${order}/info.json" "${CURRENT_CONTAINERS}/${PACKED_ORDER}.json"
end script

post-stop script
  exit 0
  set +e
  source /var/starphleet/.headquarters
  echo container stopped, cleaning up
  PACKED_ORDER=$(echo ${order} | sed -e "s[/[_[g")
  #this just removes all the files we created in post-start, so if you add a file
  #there, add it here. FOR STARPHLEET!
  rm "${order}/${image}.cid"
  rm "${order}/container.json"
  rm "${order}/info.json"
  rm "${CURRENT_CONTAINERS}/${PACKED_ORDER}.json"
end script
