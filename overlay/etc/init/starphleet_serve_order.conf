description "Starphleet order needs to be served, which is running a container for a given image version"

stop on stopping starphleet

#name is to let us have multiple running versions of the same order
instance $name
#also needs
# - $order: the directory where the ordered repository is cloned

respawn

pre-start script
  source /var/starphleet/.headquarters
  CONTAINER_NAME="${name}"
  ORDER_LOCAL="${CURRENT_ORDERS}/${order}/git"
  #flock, no need to chew up the whole machine making containers
  echo 'building' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  flock "${CURRENT_ORDERS}" -c "starphleet-containerize ${ORDER_LOCAL} ${CONTAINER_NAME} \"${CURRENT_ORDERS}/${order}/orders\""
  echo 'built' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
end script

script
  source /var/starphleet/.headquarters
  CONTAINER_NAME="${name}"
  lxc-attach --name ${CONTAINER_NAME} -- /web
end script

post-start script
  #the container and service is started, so check it and publish it
  set +e
  source /var/starphleet/.headquarters
  export CONTAINER_NAME="${name}"
  echo 'checking' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"

  #sourcing here to get variables, in particular $PORT
  test -f "${CURRENT_ORDERS}/${order}/orders" && source "${CURRENT_ORDERS}/${order}/orders"
  test -f "${HEADQUARTERS_LOCAL}/.starphleet" && source "${HEADQUARTERS_LOCAL}/.starphleet"

  available () {
    #at this point we have a running container, and it answers HTTP, so we
    #are on the air and can expose it via nginx
    #note that the publication name doesn't have the version hashes in it, this
    #is because new versions replace old versions in nginx for the HUP update -- if
    #two versions of the config are left about on disk, then we will have duplicate
    #entries
    starphleet-publish "${CONTAINER_NAME}" ${PORT} "/${order}"
    info service published to "/${order}"
    echo 'online' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  }

  #if there is a specified healthcheck url
  if [ -f "${CURRENT_ORDERS}/${order}/git/healthcheck" ]; then
    #forgive comments in the healthcheck file
    HEALTHCHECK=$(sed '/^\#/d' "${CURRENT_ORDERS}/${order}/git/healthcheck")
  else
    HEALTHCHECK='/'
  fi
  if starphleet-ready "${CONTAINER_NAME}" "${PORT}" "${HEALTHCHECK}"; then
    available
  else
    #at this point the service has failed to properly start
    warn service failed to publish "/${order}"
    echo 'failed' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
  fi
end script

post-stop script
  set +e
  source /var/starphleet/.headquarters
  export CONTAINER_NAME="${name}"
  starphleet-unpublish "/${order}"
  starphleet-destroy-lxc "${CONTAINER_NAME}"
  echo 'offline' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
end script
