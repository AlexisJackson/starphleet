#!/usr/bin/env bash
## build 0.1.0
### Usage:
###    build <local_repository>
### --help
###
### Given a local repository that is Starphleet enabled, build up a container
### for it.
### This looks for a file ./Starphleet in the repository, and then inside that
### for:
###
### build script
### ... your script here...
### end script
###
### This script will be run as root on the container, so it is a great place
### to use apt-get to shove on packages. When it is all done, there will be a
### container ready to run for your repository.
###
### The container will have a layout with the following special directories:
### /var/starphleet - This mounts back to /var/starphleet on the host
###    read only
### /local_repository - This is a copy of the source local repository, taking
###    a snapshot so you cannot modify the source
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
version=$(grep "^## "  "$0" | cut -c 4-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"

set +e

#setting up, get the script that will be used to `build` a container, that
#goes with the current commit sha of the repository.

EXTRACTOR='
  /build script/ { in_it = 1; next;}
  /end script/ {in_it = 0;}
  {if (in_it) print $0;}
'

#Need to wait for the network to come up before we start the build
#script, otherwise apt et al won't do so very much
BUILDER=${TMPDIR-/tmp}/$$
"${DIR}/starphleet-wait-network" > ${BUILDER}

if [ -f "${local_repository}/Starphleet" ]; then
  cat "${local_repository}/Starphleet" | awk "${EXTRACTOR}" - >> ${BUILDER}
else
  echo '' >> ${BUILDER}
fi
trap 'rm -rf ${BUILDER}' EXIT

get_CURRENT_SHA "${local_repository}"
CONTAINER_NAME="${CURRENT_SHA}"
CONTAINER_ROOT=/var/lib/lxc/${CONTAINER_NAME}/rootfs

CONTAINER_CONF=${TMPDIR-/tmp}/${CONTAINER_NAME}.conf
cat << EOF > ${CONTAINER_CONF}
lxc.mount.entry = /var/starphleet ${CONTAINER_ROOT}/var/starphleet none bind,ro 0 0
EOF
trap 'rm -rf ${CONTAINER_CONF}' EXIT

BASE_BUILD=${TMPDIR-/tmp}/basebuild
cat << EOF > ${BASE_BUILD}
  apt-get -y update
  apt-get -y install --force-yes git curl
  apt-get -y install --force-yes python g++ make
  apt-get -y install --force-yes python-software-properties
  apt-get -y install --force-yes software-properties-common
EOF
trap 'rm -rf ${BASE_BUILD}' EXIT

info Creating ${CONTAINER_NAME}
if lxc-ls | grep "${CONTAINER_NAME}$" > /dev/null; then
  info Already built ${CONTAINER_NAME}
else
  if lxc-ls | grep "starphleet-base$" > /dev/null; then
    echo -n
  else
    BASE_CONTAINER_NAME="starphleet-base"
    lxc-create -n "${BASE_CONTAINER_NAME}" -t ubuntu
    starphleet-wait-network > "/var/lib/lxc/starphleet-base/rootfs/.block"
    cat "${BASE_BUILD}" > "/var/lib/lxc/starphleet-base/rootfs/.build"
    lxc-start --name ${BASE_CONTAINER_NAME} -d
    lxc-wait --name ${BASE_CONTAINER_NAME} --state RUNNING --timeout 30
    lxc-attach --name ${BASE_CONTAINER_NAME} -- bash /.block
    lxc-attach --name ${BASE_CONTAINER_NAME} -- bash /.build
    lxc-stop --name ${BASE_CONTAINER_NAME}
    lxc-wait --name ${BASE_CONTAINER_NAME} --state STOPPED --timeout 30
  fi
  #clone on top of the base image, this is just to save disk space
  lxc-clone -o "starphleet-base" -n "${CONTAINER_NAME}" -s
  #mounts and files, always can see starphleet read only
  mkdir ${CONTAINER_ROOT}/var/starphleet
  cat ${CONTAINER_CONF} >> ${CONTAINER_ROOT}/../config
  #build
  cp ${BUILDER} ${CONTAINER_ROOT}/.build
  lxc-start --name ${CONTAINER_NAME} -d
  lxc-wait --name ${CONTAINER_NAME} --state RUNNING --timeout 30
  #always able to see your own source
  if btrfs subvolume snapshot "${order}/git" ${CONTAINER_ROOT}; then
    echo Used a snapshot
  else
    echo Used a copy
    cp -R "${order}/git" "${CONTAINER_ROOT}/local_repository"
  fi
  lxc-attach --name ${CONTAINER_NAME} -- bash /.build
  lxc-stop --name ${CONTAINER_NAME}
  lxc-wait --name ${CONTAINER_NAME} --state STOPPED --timeout 30
  info Built ${CONTAINER_NAME}
fi
