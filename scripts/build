#!/usr/bin/env bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools

## build 0.1.0
### Usage:
###    build <local_repository>
### --help
###
### Given a local repository that is Starphleet enabled, build up a container
### for it.
### This looks for a file ./Starphleet in the repository, and then inside that
### for:
###
### build script
### ... your script here...
### end script
###
### This script will be run as root on the container, so it is a great place
### to use apt-get to shove on packages. When it is all done, there will be a
### container ready to run for your repository.
###
### The container will have a layout with the following special directories:
### /var/starphleet - This mounts back to /var/starphleet on the host
###    read only
### /local_repository - This is a copy of the source local repository, taking
###    a snapshot so you cannot modify the source
help=$(grep "^### " "$0" | cut -c 5-)
version=$(grep "^## "  "$0" | cut -c 4-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"

makeBuilder

CONTAINER_ROOT=/var/lib/lxc/${CONTAINER_NAME}/rootfs
CONTAINER_LOCK=${TMPDIR-/tmp}/${CONTAINER_NAME}
trap 'rm -rf ${CONTAINER_LOCK}' EXIT

CONTAINER_CONF=${TMPDIR-/tmp}/${CONTAINER_NAME}.conf
cat << EOF > ${CONTAINER_CONF}
lxc.mount.entry = /var/starphleet ${CONTAINER_ROOT}/var/starphleet none bind,ro 0 0
EOF

trap 'rm -rf ${CONTAINER_CONF}' EXIT

#all set up, now it is time to make a container, using a file name as a
#kind of transaction with lxc

#this is flocked-up since this can and will be called in parallel from multiple
#different ordered services
info Creating ${CONTAINER_NAME}
if lxc-ls | grep "${CONTAINER_NAME}$"; then
  info Already built
else
  flock "${CONTAINER_LOCK}" lxc-create -n ${CONTAINER_NAME} -t ubuntu
  #mounts and files, always can see starphleet read only
  mkdir ${CONTAINER_ROOT}/var/starphleet
  cat ${CONTAINER_CONF} >> ${CONTAINER_ROOT}/../config
  #build
  cp ${BUILDER} ${CONTAINER_ROOT}/.build
  lxc-start --name ${CONTAINER_NAME} -d
  lxc-wait --name ${CONTAINER_NAME} --state RUNNING
  lxc-attach --name ${CONTAINER_NAME} -- bash /.build
  lxc-stop --name ${CONTAINER_NAME}
  lxc-wait --name ${CONTAINER_NAME} --state STOPPED
  info Built ${CONTAINER_NAME}
fi
