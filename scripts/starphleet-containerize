#!/usr/bin/env bash
### Usage:
###    starphleet-containerize <git_url> <container_name> [<orders_dir>]
### --help
###
### Make a new container for a git repository service.
### This uses Heroku buildpacks, and will detect how to create your
### container automatically.
###
### Once this script is done, you will have a running container.
###
### The container will have a layout with the following special directories:
### /var/starphleet - This mounts back to /var/starphleet on the host
### ${HOME}/app - Your git repository will be here
### ${HOME}/start - This is the Heroku style start script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"
trace "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")") : $*"

set -e

#places for things to live
STARPHLEET_BASE="${STARPHLEET_BASE:-starphleet-base}"

#get the orders copied to a place where the will be visible to the container
CONTAINER_ORDERS_SCRIPT=${STARPHLEET_TMP}/${container_name}.orders
ORDERS="${orders_dir}/orders"
cp "${ORDERS}" "${CONTAINER_ORDERS_SCRIPT}"
#build script for our service container, the most important thing is that
#it gets the source from git
#the second most important thing is to know that this runs on the container
CONTAINER_BUILD_SCRIPT=${STARPHLEET_TMP}/${container_name}.build

#This *really needs* to be unescaped, need to get HOME from the point of view
#of the container
cat << 'EOF' > ${CONTAINER_BUILD_SCRIPT}
set -e
source /usr/bin/tools
trace app will be in ${HOME}/app
export ORDERS_IN=${HOME}/app
EOF

#now -- this is escaped, lots of variables included from this script
cat << EOF >> ${CONTAINER_BUILD_SCRIPT}

trace Fetching service
starphleet-git-synch "${git_url}" \${ORDERS_IN}
trace Configuring environment
sudo [ -f "${CONTAINER_ORDERS_SCRIPT}" ] && sudo cp "${CONTAINER_ORDERS_SCRIPT}" \${ORDERS_IN}/orders
sudo chown ${STARPHLEET_APP_USER} \${ORDERS_IN}/orders
sudo chmod a+x  \${ORDERS_IN}/orders
sudo ls -lah \${ORDERS_IN}
trace Running orders
run_orders \${ORDERS_IN}/orders

trace Fetching buildpacks
#set up a place onboard for possible custom buildpacks
mkdir -p "\${HOME}/build"
rsync -az "${BUILDPACKS}/" "\${HOME}/build/buildpacks"
EOF

#This *really needs* to be unescaped, notice the \$@ passed along
#to git SSH and ... there are no variables to escape :)
cat << 'EOF' >> ${CONTAINER_BUILD_SCRIPT}
trace Preparing SSH
#buildpacks may pull git and need ssh identity
starphleet-git-config > /tmp/gitsshconfig
export GIT_SSH=/tmp/gitssh
echo "ssh -F /tmp/gitsshconfig \$@" > /tmp/gitssh
chmod +x /tmp/gitssh
EOF

cat << EOF >> ${CONTAINER_BUILD_SCRIPT}
#now hand off to buildstep builder
trace Running buildpack
export BUILDPACK_CACHE_DIR="${orders_dir}/.cache"
if [ -d "\${BUILDPACK_CACHE_DIR}" ]
then
  sudo rm -rf "\${BUILDPACK_CACHE_DIR}"
fi
sudo mkdir -p "\${BUILDPACK_CACHE_DIR}"
sudo chown -R ${STARPHLEET_APP_USER}:${STARPHLEET_APP_USER} "\${BUILDPACK_CACHE_DIR}"

builder \${ORDERS_IN}/orders
EOF

info building ${container_name}
#making base containers as needed, base container serves as the source for
#and we clone the service container on top, the idea is the base container
#can be re-used and thus improve build time
if [ -f "${HEADQUARTERS_LOCAL}/containers/${STARPHLEET_BASE}" ]
then
  #base container from a headquarters container script
  starphleet-containermake "${STARPHLEET_BASE}" "${HEADQUARTERS_LOCAL}/containers/${STARPHLEET_BASE}"
elif [ -f "/var/starphleet/containers/${STARPHLEET_BASE}" ]
then
  #base container from a starphleet provided container script
  starphleet-containermake "${STARPHLEET_BASE}" "/var/starphleet/containers/${STARPHLEET_BASE}"
else
  fatal no base container script ${STARPHLEET_BASE} is available
fi
starphleet-containermake --run "${container_name}" "${CONTAINER_BUILD_SCRIPT}" "${STARPHLEET_BASE}"
