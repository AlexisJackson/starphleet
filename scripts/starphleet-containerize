#!/usr/bin/env bash
### Usage:
###    starphleet-containerize <git_url> <container_name> [<orders_script>]
### --help
###
### Make a new container for a git repository service.
### This uses Heroku buildpacks, and will detect how to create your
### container automatically.
###
### Once this script is done, you will have a running container.
###
### The container will have a layout with the following special directories:
### /var/starphleet - This mounts back to /var/starphleet on the host
### /app - Your git repository will be here
### /block - Handy way to block until the container has networking
### /start - This is the Heroku style start script
### /web - This is a shortcut for /start web
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"

set -e

#places for things to live
STARPHLEET_BASE="${STARPHLEET_BASE:-starphleet-base}"
CONTAINER_NAME="${container_name}"
CONTAINER_ROOT=/var/lib/lxc/${CONTAINER_NAME}/rootfs

#get the orders copied to a place where the will be visible to the container
CONTAINER_ORDERS_SCRIPT=${STARPHLEET_TMP}/${CONTAINER_NAME}.orders
ORDERS="${orders_script:-${DIR}/orders}"
[ -f "${ORDERS}" ] && cp "${ORDERS}" "${CONTAINER_ORDERS_SCRIPT}"

#build script for our service container, the most important thing is that
#it gets the source from git
#the second most important thing is to know that this runs on the container
CONTAINER_BUILD_SCRIPT=${STARPHLEET_TMP}/${CONTAINER_NAME}.conf
cat << EOF > ${CONTAINER_BUILD_SCRIPT}
#source to get the headquarters and default environment
cp "${CONTAINER_ORDERS_SCRIPT}" /.orders
source /usr/bin/tools
starphleet-git-synch "${git_url}" /app
#source again, we may now have orders which change the environment
source /usr/bin/tools
starphleet-buildpack-script
EOF

#actually make a container here
info creating ${CONTAINER_NAME}
if lxc-ls | grep "^${CONTAINER_NAME}$" > /dev/null; then
  warn already built ${CONTAINER_NAME}
  lxc-start --name ${CONTAINER_NAME} -d
  starphleet-lxc-wait ${CONTAINER_NAME} RUNNING
  lxc-attach --name ${CONTAINER_NAME} -- bash starphleet-wait-network
  exit 0
else
  #making base containers as needed, base container serves as the source for
  #and we clone the service container on top, the idea is the base container
  #can be re-used and thus improve build time
  if [ -f "${HEADQUARTERS_LOCAL}/containers/${STARPHLEET_BASE}" ]
  then
    #base container from a headquarters container script
    starphleet-containermake "${STARPHLEET_BASE}" "${HEADQUARTERS_LOCAL}/containers/${STARPHLEET_BASE}"
  elif [ -f "/var/starphleet/containers/${STARPHLEET_BASE}" ]
  then
    #base container from a starphleet provided container script
    starphleet-containermake "${STARPHLEET_BASE}" "/var/starphleet/containers/${STARPHLEET_BASE}"
  else
    fatal no base container script ${STARPHLEET_BASE} is available
  fi
  starphleet-containermake "${CONTAINER_NAME}" "${CONTAINER_BUILD_SCRIPT}" "${STARPHLEET_BASE}"
fi
