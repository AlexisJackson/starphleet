#!/usr/bin/env bash
### Usage:
###    starphleet-git-synch <remote> <local>
### --help
###
### Make sure a git repo, with an option #[branch|tag] is
### pulled and merged into the specified local
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"


REMOTE=$(echo "${remote}" | awk -F '#' '{print $1;}')
BRANCH=$(echo "${remote}" | awk -F '#' '{print $2;}')

if [ -d "${local}" ]; then
  cd "${local}"
  #make sure we have the correct repository and branch
  ORIGIN_URL=`git config remote.origin.url`
  if [ "${ORIGIN_URL}" != "${REMOTE}" ]; then
    warn repository url differs, reclone needed
    cd ..
    rm -rf "${local}"
    starphleet-git clone "${REMOTE}" "${local}"
  fi
  CURRENT_BRANCH=`git rev-parse --symbolic-full-name --abbrev-ref HEAD`
  if [ -n "${BRANCH}" ]; then
    if [ "${BRANCH}" != "${CURRENT_BRANCH}" ]; then
      warn specified branch changed, checkout out ${BRANCH}
      git checkout "${BRANCH}"
    fi
  fi
  CURRENT_BRANCH=`git rev-parse --symbolic-full-name --abbrev-ref HEAD`
  starphleet-git fetch --all || fatal fetch error
  HAS_CHANGES=`git diff HEAD...origin/${CURRENT_BRANCH} --raw`
  if [ "${HAS_CHANGES}x" != "x" ]; then
    warn new code detected, pulling
    starphleet-git pull
  fi
else
  warn ${local} not found, initial clone needed
  starphleet-git clone "${REMOTE}" "${local}"
  cd "${local}"
  if [ -n "${BRANCH}" ]; then
    git checkout "${BRANCH}"
  fi
fi
