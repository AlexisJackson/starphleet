#!/usr/bin/env starphleet-launcher
### Usage:
###    starphleet-lxc-ssh ORDERNAME [COMMAND ...]
### --help
###
###   "Runs ssh to connect to the given container"
###
###   "Arguments:"
###   "NAME    : name of the original starphleet order.  Replaced with the IP address of the container."
###   "COMMAND : optional command to pass to ssh"
###
die_on_error

get_ip(){
  container_name=$(cat "${CURRENT_ORDERS}/${ORDER}/.container")
  ip=$(cat "${CURRENT_ORDERS/${ORDER}/.starphleetstatus.${container_name}.ip")
  echo "${ip}"
}

do_ssh(){

    # Use get_ip to wait for container's network to be up
    # and to obtain the ip address, then we can ssh to the lxc.
    TRIES=60
    FAILED=1

    # Repeatedly try to connect over SSH until we either succeed
    # or time out.
    for i in $(seq 1 $TRIES); do
        IP_ADDRESS=$(get_ip $ORDER)
        if [ -z "$IP_ADDRESS" ]; then
            sleep 1
            continue
        fi

        # Iterate through all the addresses (if multiple)
        for ip in $IP_ADDRESS; do
            ssh -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                $SSH_OPTS \
                admiral@$IP_ADDRESS "$@"
            if [ ! 255 -eq $? ]; then
                # If ssh returns 255 then its connection failed.
                # Anything else is either success (status 0) or a
                # failure from whatever we ran over the SSH connection.
                # In those cases we want to stop looping, so we break
                # here

                FAILED=0
                break;
            fi
        done

        if [ "$FAILED" = "0" ]; then
            break
        fi
        sleep 1
    done

    if [ "$FAILED" = "1" ]; then
        echo "could not get IP address - aborting." >&2
    fi
}

ORDER=$1
shift
SSH_OPTS="-t"
do_ssh "$@"
