#!/usr/bin/env bash
### Usage:
###    starphleet-publish <container_name> <container_port> <publish_port> <public_url> <htpasswd> <ldap>
### --help
###
### Publish HTTP traffic from the container out to the ship
### nginx at a designated url mount point. This lets you aggregate multiple
### web services under one host and avoid CORS and cross domain muck.
###
### Optionally, you can 'deep publish' or alias further into the container.
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"
trace "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")") : $*"
set -e


order_name=${public_url}
if [ "${public_url}" == "/" ]; then
  public_url=""
fi
#pulling out any nested quotes
container_port=$(eval echo ${container_port})
publish_port=$(eval echo ${publish_port})
MOUNT_CONF="${NGINX_CONF}/published/$(urlencode \"${public_url}\").conf"
BARE_CONF="${NGINX_CONF}/published_bare/$(urlencode \"${public_url}\").conf"
IP_ADDRESS=$(lxc-ls --fancy | grep "^${container_name}" | awk '{ print $3; }')

test ! -d "${NGINX_CONF}/published" && mkdir -p "${NGINX_CONF}/published"
test ! -d "${NGINX_CONF}/published_bare" && mkdir -p "${NGINX_CONF}/published_bare"

[ -f "${NGINX_CONF}/published/crt" ] || cp "${NGINX_CONF}/crt" "${NGINX_CONF}/published/crt"
[ -f "${NGINX_CONF}/published/key" ] || cp "${NGINX_CONF}/key" "${NGINX_CONF}/published/key"


#basic publication at an url mount point
cat << EOF > "${MOUNT_CONF}"
location ${public_url}/cache1h/ {
    proxy_buffering on;
    proxy_cache primary_zone;
    proxy_cache_lock on;
    proxy_cache_methods GET HEAD POST;
    # this is the default, but I want to be explicit so it's clear
    # what's going on here
    proxy_cache_lock_timeout 5s;
    proxy_cache_use_stale updating error timeout;
    proxy_cache_valid 1h;
    proxy_pass http://${IP_ADDRESS}:${container_port};
}

location ${public_url}/cache2h/ {
    proxy_buffering on;
    proxy_cache primary_zone;
    proxy_cache_lock on;
    proxy_cache_methods GET HEAD POST;
    # this is the default, but I want to be explicit so it's clear
    # what's going on here
    proxy_cache_lock_timeout 5s;
    proxy_cache_use_stale updating error timeout;
    proxy_cache_valid 2h;
    proxy_pass http://${IP_ADDRESS}:${container_port};
}

location ${public_url}/cache4h/ {
    proxy_buffering on;
    proxy_cache primary_zone;
    proxy_cache_lock on;
    proxy_cache_methods GET HEAD POST;
    # this is the default, but I want to be explicit so it's clear
    # what's going on here
    proxy_cache_lock_timeout 5s;
    proxy_cache_use_stale updating error timeout;
    proxy_cache_valid 4h;
    proxy_pass http://${IP_ADDRESS}:${container_port};
}

location ${public_url}/cache365d/ {
    proxy_buffering on;
    proxy_cache primary_zone;
    proxy_cache_lock on;
    proxy_cache_methods GET HEAD POST;
    # this is the default, but I want to be explicit so it's clear
    # what's going on here
    proxy_cache_lock_timeout 5s;
    proxy_cache_use_stale updating error timeout;
    proxy_cache_valid 365d;
    proxy_pass http://${IP_ADDRESS}:${container_port};
}

location ${public_url}/ {
  gzip on;
  gzip_types *;
  gzip_proxied any;
  gzip_comp_level 6;
  include ${NGINX_CONF}/cors.conf;
  # Path rewriting to hide mount prefix
  rewrite ${public_url}/(.*) /\$1 break;
  proxy_set_header X-Forwarded-Host \$host;
  proxy_set_header X-Forwarded-Server \$host;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_set_header Host \$http_host;
  proxy_pass http://${IP_ADDRESS}:${container_port};
  add_header X-CONTAINER ${container_name};
  add_header X-SHIP $(hostname);
  # WebSocket support (nginx 1.4)
  proxy_http_version 1.1;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "upgrade";
EOF
if [ -n "${htpasswd}" ]; then
  info password file enabled
  echo "  auth_basic \"\";" >> "${MOUNT_CONF}"
  echo "  auth_basic_user_file ${htpasswd};" >> "${MOUNT_CONF}"
  echo "  add_header X-GLGAuthUser \$remote_user;" >> "${BARE_CONF}"
  echo "  proxy_set_header X-GLGAuthUser \$remote_user;" >> "${BARE_CONF}"
fi
if [ -n "${ldap}" ]; then
  info LDAP enabled
  echo "  auth_ldap \"Forbidden!\";" >> "${MOUNT_CONF}"
  echo "  auth_ldap_servers $(cat ${ldap});" >> "${MOUNT_CONF}"
  echo "  add_header X-GLGAuthUser \$remote_user;" >> "${BARE_CONF}"
  echo "  proxy_set_header X-GLGAuthUser \$remote_user;" >> "${BARE_CONF}"
fi
echo '}' >> "${MOUNT_CONF}"
info "published ${container_name}:${container_port} to ${public_url}"

#port publication, this is optional if a port is set
if [ "${publish_port}" != "0" ]
then
cat << EOF > "${BARE_CONF}"
server {
  listen ${publish_port};

  location / {
    gzip on;
    gzip_types *;
    gzip_proxied any;
    gzip_comp_level 6;
    include ${NGINX_CONF}/cors.conf;
    proxy_set_header X-Forwarded-Host \$host;
    proxy_set_header X-Forwarded-Server \$host;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header Host \$http_host;
    proxy_pass http://${IP_ADDRESS}:${container_port};
    proxy_redirect \$scheme://\$host:\$server_port/ \$scheme://\$host/;
    add_header X-CONTAINER ${container_name};
    add_header X-SHIP $(hostname);
    # WebSocket support (nginx 1.4)
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
EOF
  if [ -n "${htpasswd}" ]; then
    echo "  auth_basic \"\";" >> "${BARE_CONF}"
    echo "  auth_basic_user_file ${htpasswd};" >> "${BARE_CONF}"
    echo "  add_header X-GLGAuthUser \$remote_user;" >> "${BARE_CONF}"
    echo "  proxy_set_header X-GLGAuthUser \$remote_user;" >> "${BARE_CONF}"
  fi
  if [ -n "${ldap}" ]; then
    echo "  auth_ldap \"Forbidden!\";" >> "${BARE_CONF}"
    echo "  auth_ldap_servers $(cat ${ldap});" >> "${BARE_CONF}"
    echo "  add_header X-GLGAuthUser \$remote_user;" >> "${BARE_CONF}"
    echo "  proxy_set_header X-GLGAuthUser \$remote_user;" >> "${BARE_CONF}"
  fi
  echo -e "  }\n}" >> "${BARE_CONF}"
  info "published ${container_name}:${container_port} :${publish_port}"
else
  rm -f "${BARE_CONF}"
fi

reload starphleet_nginx || start starphleet_nginx
