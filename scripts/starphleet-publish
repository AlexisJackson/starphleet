#!/usr/bin/env bash
### Usage:
###    starphleet-publish <container_name> <public_url> <orders> <htpasswd> <ldap>
### --help
###
### Publish HTTP traffic from the container out to the ship
### nginx at a designated url mount point. This lets you aggregate multiple
### web services under one host and avoid CORS and cross domain muck.
###
### Optionally, you can 'deep publish' or alias further into the container.
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"
trace "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")") : $*"
set -e

run_orders "${orders}"

order_name=${public_url}
if [ "${public_url}" == "/" ]; then
  public_url=""
fi
MOUNT_CONF="${NGINX_CONF}/published/$(urlencode \"${public_url}\").conf"
BARE_CONF="${NGINX_CONF}/published_bare/$(urlencode \"${public_url}\").conf"
IP_ADDRESS=$(lxc-ls --fancy | grep "^${container_name}" | awk '{ print $3; }')

info publishing to ${IP_ADDRESS}

if [ -z "${IP_ADDRESS}" ]; then
  error "could not find ip address for container ${container_name} cannot publish"
  exit 1
fi

test ! -d "${NGINX_CONF}/published" && mkdir -p "${NGINX_CONF}/published"
test ! -d "${NGINX_CONF}/published_bare" && mkdir -p "${NGINX_CONF}/published_bare"

[ -f "${NGINX_CONF}/published/crt" ] || cp "${NGINX_CONF}/crt" "${NGINX_CONF}/published/crt"
[ -f "${NGINX_CONF}/published/key" ] || cp "${NGINX_CONF}/key" "${NGINX_CONF}/published/key"


#basic publication at an url mount point
cat << EOF > "${MOUNT_CONF}"

location ${public_url}/ {
  set \$true 1;
  gzip on;
  gzip_types *;
  gzip_proxied any;
  gzip_comp_level 6;
  include ${NGINX_CONF}/cors.conf;
  proxy_set_header X-Forwarded-Host \$host;
  proxy_set_header X-Forwarded-Server \$host;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_set_header Host \$http_host;
  # WebSocket support (nginx 1.4)
  proxy_http_version 1.1;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "upgrade";
EOF
if [[ "${htpasswd}" != '' && "${htpasswd}" != '-' ]]; then
  info password file enabled
  echo "  auth_basic \"\";" >> "${MOUNT_CONF}"
  echo "  auth_basic_user_file ${htpasswd};" >> "${MOUNT_CONF}"
  echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${MOUNT_CONF}"
fi
if [[ "${ldap}" != '' && "${ldap}" != '-' ]]; then
  info LDAP enabled
  echo "  auth_ldap \"Forbidden!\";" >> "${MOUNT_CONF}"
  echo "  auth_ldap_servers $(cat ${ldap});" >> "${MOUNT_CONF}"
  echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${MOUNT_CONF}"
fi
#beta handling is a bit tricky, the if must be inverted to appease nginx
echo "  if ( \$${BETA_GROUP:-true} ) {" >> "${MOUNT_CONF}"
echo "    rewrite ${public_url}/(.*) /\$1 break;" >> "${MOUNT_CONF}"
echo "    proxy_pass http://${IP_ADDRESS}:${PORT}; break;" >> "${MOUNT_CONF}"
echo "  }" >> "${MOUNT_CONF}"
if [ -n "${BETA_PROXY}" ]; then
  echo "  rewrite ${public_url}/(.*) ${BETA_PROXY}/\$1;" >> "${MOUNT_CONF}"
fi
echo '}' >> "${MOUNT_CONF}"
#redirect to forgive a lack of trailing slash
cat << EOF >> "${MOUNT_CONF}"
location ~* ${public_url}$ {
  rewrite .* ${public_url}/ redirect;
}
EOF
info "published ${container_name}:${PORT} to ${public_url}"

#port publication, this is optional if a port is set
if [ "${PUBLISH_PORT}" != "0" ]
then
cat << EOF > "${BARE_CONF}"
server {
  listen ${PUBLISH_PORT};

  location / {
    gzip on;
    gzip_types *;
    gzip_proxied any;
    gzip_comp_level 6;
    include ${NGINX_CONF}/cors.conf;
    proxy_set_header X-Forwarded-Host \$host;
    proxy_set_header X-Forwarded-Server \$host;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header Host \$http_host;
    proxy_pass http://${IP_ADDRESS}:${PORT};
    proxy_redirect \$scheme://\$host:\$server_port/ \$scheme://\$host/;
    # WebSocket support (nginx 1.4)
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
EOF
  if [[ "${htpasswd}" != '' && "${htpasswd}" != '-' ]]; then
    echo "  auth_basic \"\";" >> "${BARE_CONF}"
    echo "  auth_basic_user_file ${htpasswd};" >> "${BARE_CONF}"
    echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${BARE_CONF}"
  fi
  if [[ "${ldap}" != '' && "${ldap}" != '-' ]]; then
    echo "  auth_ldap \"Forbidden!\";" >> "${BARE_CONF}"
    echo "  auth_ldap_servers $(cat ${ldap});" >> "${BARE_CONF}"
    echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${BARE_CONF}"
  fi
  echo -e "  }\n}" >> "${BARE_CONF}"
  info "published ${container_name}:${PORT} :${PUBLISH_PORT}"
else
  rm -f "${BARE_CONF}"
fi

reload starphleet_nginx || start starphleet_nginx
